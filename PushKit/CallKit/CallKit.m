//
//  CallKit.m
//  PushKit
//
//  Created by tigerfly on 2020/12/14.
//  Copyright © 2020 tigerfly. All rights reserved.
//

#import "CallKit.h"

@interface CallKit ()

@end

@implementation CallKit

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    
    
    /*
     Display the system-calling UI for your app's VoIP
     services, and coordinate your calling services with
     other apps and the system.
     
     CallKit lets you integrate your calling services with other
     call-related apps on the system. CallKit provides the calling
     interface, and you handle the back-end communication with your
     VoIP service. For incoming and outgoing calls, CallKit displays
     the same interfaces as the Phone app, giving your app a more
     native look and feel. And CallKit responds appropriately to
     system-level behaviors such as Do not Disturb.
     
     In addition to handling calls, you can provide a Call Directory
     app extension to provide caller ID information and a list of
     blocked numbers associated with your service.
     */
    
    
#pragma mark -- Receiving an Incoming Call
    
    /*
     To configure your app to receive incoming calls, first create
     a CXProvider object and store it for global access. An app
     reports an incoming call to the provider in response to an
     external notification, such as a VoIP push notification
     generated by PushKit.
     
     Listing 1 Receiving a VoIP–related push notification
     ===============================================================
     // MARK: PKPushRegistryDelegate
     func pushRegistry(_ registry: PKPushRegistry, didReceiveIncomingPushWith payload: PKPushPayload, forType type: PKPushType) {
         // report new incoming call
     }
     ===============================================================

     ⚠️ For more information about VoIP push notifications and PushKit,
     see Voice Over IP (VoIP) Best Practices.
     //https://developer.apple.com/library/archive/documentation/Performance/Conceptual/EnergyGuide-iOS/OptimizeVoIP.html#//apple_ref/doc/uid/TP40015243-CH30
     
     Using the information provided by the external notification, the
     app creates a UUID and a CXCallUpdate object to uniquely identify
     the call and the caller, and passes them both to the provider
     using the reportNewIncomingCallWithUUID:update:completion: method.
     ===============================================================
     Listing 2 Handling an incoming call
     if let uuidString = payload.dictionaryPayload["UUID"] as? String,
         let identifier = payload.dictionaryPayload["identifier"] as? String,
         let uuid = UUID(uuidString: uuidString)
     {
         let update = CXCallUpdate()
         update.callerIdentifier = identifier
         
         provider.reportNewIncomingCall(with: uuid, update: update) { error in
             // …
         }
     }
     ===============================================================

     After the call is connected, the system calls the
     provider:performStartCallAction: method of the provider delegate.
     In your implementation, the delegate is responsible for
     configuring an AVAudioSession and calling fulfill on the action
     when finished.
     
     ===============================================================
     Listing 3 Initiating the audio for a call
     
     func provider(_ provider: CXProvider, perform action: CXAnswerCallAction) {
         // configure audio session
         action.fulfill()
     }
     ===============================================================
     
     */
    
    
    /*
     Making Outgoing Calls
     
     A user can initiate an outgoing call with a VoIP app in
     any of the following ways:

     •  Performing an interaction within the app
     •  Opening a link with a supported custom URL scheme
     •  Initiating a VoIP call using Siri

     To make an outgoing call, an app requests a CXStartCallAction
     object from its CXCallController object. The action consists
     of a UUID to uniquely identify the call and a CXHandle object
     to specify the recipient.
     ===============================================================
     Listing 4 Starting an outgoing call
     
     let uuid = UUID()
     let handle = CXHandle(type: .emailAddress, value: "jappleseed@apple.com")
      
     let startCallAction = CXStartCallAction(call: uuid)
     startCallAction.destination = handle
      
     let transaction = CXTransaction(action: startCallAction)
     callController.request(transaction) { error in
         if let error = error {
             print("Error requesting transaction: \(error)")
         } else {
             print("Requested transaction successfully")
         }
     }
     ===============================================================

     ⚠️ For more information about registering and handling URLs,
     see Using URL Schemes to Communicate with Apps.
     
     For more information about initiating a call using Siri, see
     the INStartAudioCallIntentHandling protocol.

     After the recipient answers the call, the system calls the
     provider delegate’s provider:performStartCallAction: method.
     In your implementation of that method, configure an
     AVAudioSession and call the fulfill method on the action
     object when finished.
     ===============================================================
     Listing 5 Initiating the call
     func provider(_ provider: CXProvider, perform action: CXAnswerCallAction) {
         // configure audio session
         action.fulfill()
     }
     ===============================================================
     */
    
    /*
     Call Blocking and Identification
     
     Apps can create a Call Directory app extension to identify
     and block incoming callers by their phone number.

     ⚠️ Phone numbers in a Call Directory extension are represented
     by the CXCallDirectoryPhoneNumber type and consist of a country
     calling code (such as 1 for the United States) followed by
     a sequence of digits.
     */
    
    /**
     Creating a Call Directory App Extension
     
     You can create a Call Directory extension for your
     containing app by adding a new project target and
     selecting the Call Directory Extension template under
     Application Extensions.
     file:///Users/tigerfly/Desktop/PushKit/PushKit/bcab0864-581b-491f-93c1-4245cf2624c7.png
     
     You set up both identification and blocking of incoming
     calls in the implementation of the beginRequestWithExtensionContext:
     method of the CXCallDirectoryProvider subclass of your Call
     Directory extension. This method is called when the system
     launches the app extension.
     
     For more information about how app extensions work, see App
     Extension Programming Guide.
     */
    
    /**
     Identifying Incoming Callers
     
     When a phone receives an incoming call, the system
     first consults the user’s contacts to find a matching
     phone number. If no match is found, the system then
     consults your app’s Call Directory extension to find a
     matching entry to identify the phone number. This is
     useful for applications that maintain a contact list
     for a user that’s separate from the system contacts,
     such as a social network, or for identifying incoming
     calls that may be initiated from within the app, such
     as for customer service support or a delivery notification.
     
     For example, consider a user who is friends with Jane
     in a social networking app, but who doesn’t have her
     phone number in their contacts. The social networking
     app has a Call Directory app extension, which downloads
     and adds the phone numbers of all of the user’s friends.
     Because of this, when the user gets an incoming call from
     Jane, the system displays something like “(App Name) Caller
     ID: Jane Appleseed” rather than “Unknown Caller”.
     
     To provide identifying information about incoming callers,
     you use the addIdentificationEntryWithNextSequentialPhoneNumber:label:
     method in the implementation of beginRequestWithExtensionContext:.
     ===============================================================
     @interface CustomCallDirectoryProvider: CXCallDirectoryProvider
     @end
      
     @implementation CustomCallDirectoryProvider
     - (void)beginRequestWithExtensionContext:(NSExtensionContext *)context {
         NSDictionary<NSNumber *, NSString *> *labelsKeyedByPhoneNumber = @{ … };
         for (NSNumber *phoneNumber in [labelsKeyedByPhoneNumber.allKeys sortedArrayUsingSelector:@selector(compare:)]) {
            NSString *label = labelsKeyedByPhoneNumber[phoneNumber];
            [context addIdentificationEntryWithNextSequentialPhoneNumber:(CXCallDirectoryPhoneNumber)[phoneNumber unsignedLongLongValue] label:label];
         }
      
         [context completeRequestWithCompletionHandler:nil];
     }
     @end
     ===============================================================

     Because this method is called only when the system launches
     the app extension and not for each individual call, you must
     specify call identification information all at once; you
     cannot, for example, make a request to a web service to
     find information about an incoming call.

     */
    
    /**
     Blocking Incoming Calls
     
     When a phone receives an incoming call, the system first
     consults the user’s block list to determine whether a call
     should be blocked. If the phone number is not on a user-
     or system-defined block list, the system then consults your
     app’s Call Directory extension to find a matching blocked
     number. This is useful for apps that, for example, maintain
     a database of known solicitors, or allow the user to block
     any numbers that match a set of criteria.
     
     To block incoming calls for a particular phone number, you
     use the addBlockingEntryWithNextSequentialPhoneNumber: method
     in the implementation of beginRequestWithExtensionContext:.

     ⚠️ You can specify that your Call Directory app extension
     add identification and/or block phone numbers in its
     implementation of beginRequestWithExtensionContext:.
     ===============================================================
     @interface CustomCallDirectoryProvider: CXCallDirectoryProvider
     @end
      
     @implementation CustomCallDirectoryProvider
     - (void)beginRequestWithExtensionContext:(NSExtensionContext *)context {
         NSArray<NSNumber *> *blockedPhoneNumbers.sorted = @[ … ];
          for (NSNumber *phoneNumber in [blockedPhoneNumbers.sorted sortedArrayUsingSelector:@selector(compare:)]) {
             [context addBlockingEntryWithNextSequentialPhoneNumber:(CXCallDirectoryPhoneNumber)[phoneNumber unsignedLongLongValue]];
          }
      
         [context completeRequestWithCompletionHandler:nil];
     }
     @end
     ===============================================================
     */
    
    
#pragma mark -- Essentials
    
    /*
     Call-related actions are routed through your provider and
     its delegate, which you use to communicate with your
     service.
     */
    
    /**
     CXProvider
     
     An object that represents a telephony provider.
     
     A CXProvider object is responsible for reporting out-of-band
     notifications that occur to the system. A VoIP app should
     create only one instance of CXProvider and store it for use
     globally. A CXProvider object is initialized with a
     CXProviderConfiguration object to specify the behavior and
     capabilities of calls. Each provider can specify an object
     conforming to the CXProviderDelegate protocol to responds
     to events, such as the call starting, the call being put
     on hold, or the provider's audio session being activated.
     */
    
    
    
}

#pragma mark --









/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender {
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

@end
